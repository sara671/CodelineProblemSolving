problem 1
import re
import tkinter as tk
from tkinter import messagebox

def validate_username(username):
    if not username:
        return False, "Username cannot be empty."
    if len(username) > 50:
        return False, "Username cannot exceed 50 characters."
    return True, ""

def validate_password(password):
    if len(password) < 8:
        return False, "Password must be at least 8 characters long."
    if not re.search(r'[!@#$%^&*(),.?":{}|<>]', password):
        return False, "Password must contain at least one special symbol."
    if not re.search(r'\d', password):
        return False, "Password must contain at least one number."
    if not re.search(r'[A-Z]', password):
        return False, "Password must contain at least one uppercase letter."
    if not re.search(r'[a-z]', password):
        return False, "Password must contain at least one lowercase letter."
    return True, ""

def validate_email(email):
    if not re.match(r'^[a-zA-Z0-9]+@[a-zA-Z0-9]+\.[a-zA-Z]{2,}$', email):
        return False, "Email must be a valid format (e.g., example@domain.com)."
    return True, ""

def submit():
    username = username_entry.get()
    password = password_entry.get()
    email = email_entry.get()

    valid, message = validate_username(username)
    if not valid:
        messagebox.showerror("Validation Error", message)
        return

    valid, message = validate_password(password)
    if not valid:
        messagebox.showerror("Validation Error", message)
        return

    valid, message = validate_email(email)
    if not valid:
        messagebox.showerror("Validation Error", message)
        return

    messagebox.showinfo("Success", "All fields are valid!")

# Create the main window
root = tk.Tk()
root.title("User Information")

# Username
tk.Label(root, text="Username:").grid(row=0, column=0, padx=10, pady=5)
username_entry = tk.Entry(root)
username_entry.grid(row=0, column=1, padx=10, pady=5)

# Password
tk.Label(root, text="Password:").grid(row=1, column=0, padx=10, pady=5)
password_entry = tk.Entry(root, show="*")
password_entry.grid(row=1, column=1, padx=10, pady=5)

# Email
tk.Label(root, text="Email:").grid(row=2, column=0, padx=10, pady=5)
email_entry = tk.Entry(root)
email_entry.grid(row=2, column=1, padx=10, pady=5)

# Submit button
submit_button = tk.Button(root, text="Submit", command=submit)
submit_button.grid(row=3, columnspan=2, pady=10)

# Run the application
root.mainloop()

problem 2
def decimal_to_binary(decimal_number):
    if decimal_number == 0:
        return "0"
    
    binary_number = ""
    while decimal_number > 0:
        remainder = decimal_number % 2
        binary_number = str(remainder) + binary_number
        decimal_number = decimal_number // 2
    
    return binary_number

# Example usage:
decimal_number = 42
binary_number = decimal_to_binary(decimal_number)
print(f"Binary equivalent of {decimal_number} is {binary_number}")

problem 3

def display_right_angle_triangle(n):
    for i in range(1, n + 1):
        print('*' * i)

def display_palindromic_triangle(n):
    for i in range(1, n + 1):
        num = ''.join(str(x) for x in range(1, i + 1))
        print(num + num[-2::-1])

def show_help():
    print("\nHelp Menu:")
    print("1. Display a right-angle triangle: Enter the height of the triangle to display a right-angle triangle with that height.")
    print("2. Display a Palindromic Triangle: Enter the height of the triangle to display a palindromic triangle with that height.")
    print("3. Help: Display this help menu.")
    print("4. Exit: Exit the program.\n")

def main():
    while True:
        print("\nMenu:")
        print("1. Display a right-angle triangle")
        print("2. Display a Palindromic Triangle")
        print("3. Help")
        print("4. Exit")
        
        choice = input("Enter your choice: ")
        
        if choice == '1':
            n = int(input("Enter the height of the triangle: "))
            display_right_angle_triangle(n)
        elif choice == '2':
            n = int(input("Enter the height of the palindromic triangle: "))
            display_palindromic_triangle(n)
        elif choice == '3':
            show_help()
        elif choice == '4':
            print("Exiting the program.")
            break
        else:
            print("Invalid choice. Please enter a number between 1 and 4.")

if _name_ == "_main_":
    main()

problem 4
def list_of_squares_of_even_numbers(numbers):
    return [x**2 for x in numbers if x % 2 == 0]

def extract_sublist(numbers, start_index, end_index):
    return numbers[start_index:end_index]

def main():
    # Input for the list of integers
    numbers = input("Enter the list of integers (separated by spaces): ").split()
    numbers = [int(num) for num in numbers]
    
    # List of squares of even numbers
    even_squares = list_of_squares_of_even_numbers(numbers)
    print(f"List of squares of even numbers: {even_squares}")
    
    # Input for slicing
    start_index = int(input("Enter the start index for slicing: "))
    end_index = int(input("Enter the end index for slicing: "))
    
    # Extracted sublist
    sublist = extract_sublist(numbers, start_index, end_index)
    print(f"Extracted sublist: {sublist}")

if _name_ == "_main_":
    main()

